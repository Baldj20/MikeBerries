name: Build & Test ðŸ§ª

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DOTNET_VERSION: '8.0.x'
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_PROJECT_KEY: "Baldj20_MikeBerries"
  SONAR_ORGANIZATION: "baldj20"
  SONAR_PROJECT_NAME: "ProductService"
  SONAR_EXCLUDE_FROM_COVERAGE: "/Program.cs, /Migrations/, /Controllers/, /Repositories/*"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET ðŸ“¦
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install Coverlet for .NET
        run: dotnet tool install --global coverlet.console

      - name: Install SonarScanner for .NET
        run: dotnet tool install --global dotnet-sonarscanner
      
      - name: SonarQube Begin Analysis
        shell: pwsh
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          $coverageReportPath = "coverage.opencover.xml"
          $sonarCoverageParam = "/d:sonar.cs.opencover.reportsPaths=""$coverageReportPath"""

          dotnet-sonarscanner begin `
              /k:"$env:SONAR_PROJECT_KEY" `
              /o:"$env:SONAR_ORGANIZATION" `
              /d:sonar.login="$env:SONAR_TOKEN" `
              /d:sonar.coverage.exclusions="**/*" `
              $sonarCoverageParam
              
      - name: Build Solution
        shell: pwsh
        run: |
          $solutionPath = "ProductService/ProductService/ProductService.sln"
          dotnet build $solutionPath --no-incremental

      - name: Run Tests and Collect Coverage
        shell: pwsh
        run: |
          $solutionPath = "ProductService/ProductService/ProductService.sln"
          $coverageReportPath = "coverage.opencover.xml"

          dotnet test $solutionPath `
              --no-build `
              /p:CollectCoverage=true `
              /p:CoverletOutputFormat=opencover `
              /p:CoverletOutput="$coverageReportPath"
              
      - name: SonarQube End Analysis
        shell: pwsh
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet-sonarscanner end /d:sonar.login="$env:SONAR_TOKEN"

  
